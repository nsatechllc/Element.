/*
 Automated · Intelligent · Natural
 - Element. by NSA TECHNOLOGIES

 Author: Daniel J. Sopher
 © Copyright 2018, 2025. All Rights Reserved.
*/
use prometheus::{Registry, IntCounter, Histogram, HistogramOpts, IntCounterVec, Encoder, TextEncoder, IntGauge};
#[derive(Clone)] pub struct Metrics { registry: Registry, pub sign_total: IntCounter, pub sign_latency: Histogram, pub verify_fail: IntCounterVec, pub sign_by_alg: IntCounterVec, pub rate_limited: IntCounter, pub batch_size: Histogram, pub build_info: IntGauge, pub quic_handshakes: IntCounter, pub quic_active: IntGauge, pub session_tokens: IntGauge }
impl Metrics { pub fn new() -> Self { let registry = Registry::new(); let sign_total = IntCounter::new("se_sign_total", "Total sign operations").unwrap(); let sign_latency = Histogram::with_opts(HistogramOpts::new("se_sign_latency_ms", "Sign latency ms").buckets(vec![0.5,1.0,2.0,5.0,10.0,25.0,50.0])).unwrap(); let verify_fail = IntCounterVec::new(prometheus::Opts::new("se_verify_fail_total", "Failed verifications"), &["alg"]).unwrap(); let sign_by_alg = IntCounterVec::new(prometheus::Opts::new("se_sign_by_alg_total", "Sign operations per algorithm"), &["alg"]).unwrap(); let rate_limited = IntCounter::new("se_rate_limited_total", "Requests rejected due to rate limiting").unwrap(); let batch_size = Histogram::with_opts(HistogramOpts::new("se_batch_size", "Distribution of batch request sizes").buckets(vec![1.0,2.0,5.0,10.0,25.0,50.0,100.0])).unwrap(); let build_info = IntGauge::new("se_build_info", "Build info (value is 1, labels attach metadata") .unwrap(); let quic_handshakes = IntCounter::new("se_quic_handshakes_total", "QUIC KEM handshakes completed").unwrap(); let quic_active = IntGauge::new("se_quic_active", "Active QUIC connections").unwrap(); let session_tokens = IntGauge::new("se_session_tokens", "Active issued session tokens").unwrap(); registry.register(Box::new(sign_total.clone())).ok(); registry.register(Box::new(sign_latency.clone())).ok(); registry.register(Box::new(verify_fail.clone())).ok(); registry.register(Box::new(sign_by_alg.clone())).ok(); registry.register(Box::new(rate_limited.clone())).ok(); registry.register(Box::new(batch_size.clone())).ok(); registry.register(Box::new(build_info.clone())).ok(); registry.register(Box::new(quic_handshakes.clone())).ok(); registry.register(Box::new(quic_active.clone())).ok(); registry.register(Box::new(session_tokens.clone())).ok(); build_info.set(1); Self { registry, sign_total, sign_latency, verify_fail, sign_by_alg, rate_limited, batch_size, build_info, quic_handshakes, quic_active, session_tokens } } pub fn registry_gather(&self) -> serde_json::Value { let mf = self.registry.gather(); serde_json::json!({ "metrics_families": mf.iter().map(|m| m.get_name()).collect::<Vec<_>>() }) } pub fn prometheus_text(&self) -> String { let mf = self.registry.gather(); let mut buf = Vec::new(); TextEncoder::new().encode(&mf, &mut buf).ok(); String::from_utf8(buf).unwrap_or_default() } }